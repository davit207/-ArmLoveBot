bot_code_path = "/mnt/data/main.py"

with open(bot_code_path, "w", encoding="utf-8") as f:
    f.write('''\
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

BOT_TOKEN = "8177389098:AAGr8zN3UDEE2K8L19ZwEPXHjGbZXXgWcNw"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def init_db():
    conn = sqlite3.connect("database.db")
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        age INTEGER,
        gender TEXT,
        city TEXT,
        bio TEXT,
        photo_id TEXT
    )""")
    c.execute("""
    CREATE TABLE IF NOT EXISTS likes (
        from_id INTEGER,
        to_id INTEGER,
        UNIQUE(from_id, to_id)
    )""")
    conn.commit()
    conn.close()

@dp.message(Command("start"))
async def start(message: Message):
    conn = sqlite3.connect("database.db")
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
    user = c.fetchone()
    if user:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ ArmLove!")
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArmLove! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await bot.send_chat_action(message.chat.id, "typing")
        dp.data[message.from_user.id] = {}
        dp.data[message.from_user.id]["step"] = "name"
    conn.close()

@dp.message(F.text)
async def handle_registration(message: Message):
    user_data = dp.data.get(message.from_user.id, {})
    step = user_data.get("step")

    if step == "name":
        dp.data[message.from_user.id]["name"] = message.text
        dp.data[message.from_user.id]["step"] = "age"
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    elif step == "age":
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
            return
        dp.data[message.from_user.id]["age"] = int(message.text)
        dp.data[message.from_user.id]["step"] = "gender"
        await message.answer("–¢–≤–æ–π –ø–æ–ª? (–ú / –ñ)")
    elif step == "gender":
        gender = message.text.strip().lower()
        if gender not in ["–º", "–∂"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ú –∏–ª–∏ –ñ.")
            return
        dp.data[message.from_user.id]["gender"] = gender
        dp.data[message.from_user.id]["step"] = "city"
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    elif step == "city":
        dp.data[message.from_user.id]["city"] = message.text
        dp.data[message.from_user.id]["step"] = "bio"
        await message.answer("–ù–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")
    elif step == "bio":
        dp.data[message.from_user.id]["bio"] = message.text
        dp.data[message.from_user.id]["step"] = "photo"
        await message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã:")
    elif step == "photo":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ, –Ω–µ —Ç–µ–∫—Å—Ç.")

@dp.message(F.photo)
async def save_photo(message: Message):
    if dp.data.get(message.from_user.id, {}).get("step") != "photo":
        return
    photo_id = message.photo[-1].file_id
    data = dp.data[message.from_user.id]
    conn = sqlite3.connect("database.db")
    c = conn.cursor()
    c.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)", (
        message.from_user.id,
        data["name"],
        data["age"],
        data["gender"],
        data["city"],
        data["bio"],
        photo_id
    ))
    conn.commit()
    conn.close()
    await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    await show_profile(message)

async def show_profile(message: Message):
    conn = sqlite3.connect("database.db")
    c = conn.cursor()
    c.execute("""
        SELECT * FROM users
        WHERE user_id != ?
        AND user_id NOT IN (
            SELECT to_id FROM likes WHERE from_id = ?
        )
        LIMIT 1
    """, (message.from_user.id, message.from_user.id))
    profile = c.fetchone()
    conn.close()

    if profile:
        photo = profile[6]
        text = f"–ò–º—è: {profile[1]}\\n–í–æ–∑—Ä–∞—Å—Ç: {profile[2]}\\n–ì–æ—Ä–æ–¥: {profile[4]}\\n–û —Å–µ–±–µ: {profile[5]}"
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ù§Ô∏è", callback_data=f"like:{profile[0]}")
        kb.button(text="‚ùå", callback_data=f"skip:{profile[0]}")
        await message.answer_photo(photo, caption=text, reply_markup=kb.as_markup())
    else:
        await message.answer("–ù–µ—Ç –±–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

@dp.callback_query(F.data.startswith("like:"))
async def like_user(callback: CallbackQuery):
    to_id = int(callback.data.split(":")[1])
    from_id = callback.from_user.id
    conn = sqlite3.connect("database.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO likes VALUES (?, ?)", (from_id, to_id))
    c.execute("SELECT * FROM likes WHERE from_id = ? AND to_id = ?", (to_id, from_id))
    mutual = c.fetchone()
    conn.commit()
    conn.close()
    if mutual:
        await callback.message.answer("üéâ –£ –≤–∞—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É.")
        try:
            await bot.send_message(to_id, f"üéâ –£ —Ç–µ–±—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å @{callback.from_user.username}!")
        except:
            pass
    await callback.message.delete()
    await show_profile(callback.message)

@dp.callback_query(F.data.startswith("skip:"))
async def skip_user(callback: CallbackQuery):
    from_id = callback.from_user.id
    to_id = int(callback.data.split(":")[1])
    conn = sqlite3.connect("database.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO likes VALUES (?, ?)", (from_id, to_id))
    conn.commit()
    conn.close()
    await callback.message.delete()
    await show_profile(callback.message)

if __name__ == "__main__":
    init_db()
    asyncio.run(dp.start_polling(bot))
''')

bot_code_path
